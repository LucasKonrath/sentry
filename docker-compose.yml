version: '3.8'

services:
  pr-analyzer:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: pr-coverage-analyzer
    restart: unless-stopped
    ports:
      - "${PORT:-5000}:5000"
    environment:
      # Required secrets
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GITHUB_WEBHOOK_SECRET=${GITHUB_WEBHOOK_SECRET}
      
      # Repository configuration
      - TARGET_REPOS=${TARGET_REPOS}
      
      # Coverage settings
      - COVERAGE_THRESHOLD=${COVERAGE_THRESHOLD:-80}
      - MIN_COVERAGE_INCREASE=${MIN_COVERAGE_INCREASE:-5}
      
      # Server settings
      - PORT=5000
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - FLASK_ENV=production
      
      # Optional database
      - DATABASE_URL=${DATABASE_URL}
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config:ro
      - ./results:/app/results
    networks:
      - pr-analyzer-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: Redis for task queuing
  redis:
    image: redis:7-alpine
    container_name: pr-analyzer-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - pr-analyzer-network
    command: redis-server --appendonly yes

  # Optional: PostgreSQL for analytics and tracking
  postgres:
    image: postgres:15-alpine
    container_name: pr-analyzer-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-pr_analyzer}
      - POSTGRES_USER=${POSTGRES_USER:-analyzer}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - pr-analyzer-network

  # Reverse proxy (production setup)
  nginx:
    image: nginx:alpine
    container_name: pr-analyzer-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - pr-analyzer
    networks:
      - pr-analyzer-network

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local

networks:
  pr-analyzer-network:
    driver: bridge
